# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _firmware
else:
    import _firmware

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


RELEASE_FW_VERSION = _firmware.RELEASE_FW_VERSION
MAX_FIRMWARE_BYTES = _firmware.MAX_FIRMWARE_BYTES
MAX_SPLASH_IMAGES = _firmware.MAX_SPLASH_IMAGES
FLASH_TABLE_SPLASH_INDEX = _firmware.FLASH_TABLE_SPLASH_INDEX
FLASHTABLE_APP_SIGNATURE = _firmware.FLASHTABLE_APP_SIGNATURE
FLASH_NUM_APP_ADDRS = _firmware.FLASH_NUM_APP_ADDRS
FLASH_NUM_ASIC_CFG_ADDRS = _firmware.FLASH_NUM_ASIC_CFG_ADDRS
FLASH_NUM_SEQ_ADDRS = _firmware.FLASH_NUM_SEQ_ADDRS
FLASH_NUM_APPL_CFG_ADDRS = _firmware.FLASH_NUM_APPL_CFG_ADDRS
FLASH_NUM_OSD_ADDRS = _firmware.FLASH_NUM_OSD_ADDRS
FLASH_NUM_SPLASH_ADDRS = _firmware.FLASH_NUM_SPLASH_ADDRS
FLASH_NUM_OTHER_ADDRS = _firmware.FLASH_NUM_OTHER_ADDRS
FLASH_NUM_SPLASH2_ADDRS = _firmware.FLASH_NUM_SPLASH2_ADDRS
FLASH_NUM_BATCHFILES = _firmware.FLASH_NUM_BATCHFILES
FLASH_MAX_APPS = _firmware.FLASH_MAX_APPS
FLASH_BASE_ADDRESS = _firmware.FLASH_BASE_ADDRESS
ERROR_NO_MEM_FOR_MALLOC = _firmware.ERROR_NO_MEM_FOR_MALLOC
ERROR_FRMW_FLASH_TABLE_SIGN_MISMATCH = _firmware.ERROR_FRMW_FLASH_TABLE_SIGN_MISMATCH
ERROR_NO_SPLASH_IMAGE = _firmware.ERROR_NO_SPLASH_IMAGE
ERROR_NOT_BMP_FILE = _firmware.ERROR_NOT_BMP_FILE
ERROR_NOT_24bit_BMP_FILE = _firmware.ERROR_NOT_24bit_BMP_FILE
ERROR_INIT_NOT_DONE_PROPERLY = _firmware.ERROR_INIT_NOT_DONE_PROPERLY
ERROR_WRONG_PARAMS = _firmware.ERROR_WRONG_PARAMS
ERROR_NO_SPACE_IN_FRMW = _firmware.ERROR_NO_SPACE_IN_FRMW
SPLASH_UNCOMPRESSED = _firmware.SPLASH_UNCOMPRESSED
SPLASH_RLE_COMPRESSION = _firmware.SPLASH_RLE_COMPRESSION
SPLASH_4LINE_COMPRESSION = _firmware.SPLASH_4LINE_COMPRESSION
SPLASH_NOCOMP_SPECIFIED = _firmware.SPLASH_NOCOMP_SPECIFIED
class FLASH_BLOCK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Address = property(_firmware.FLASH_BLOCK_Address_get, _firmware.FLASH_BLOCK_Address_set)
    ByteCount = property(_firmware.FLASH_BLOCK_ByteCount_get, _firmware.FLASH_BLOCK_ByteCount_set)

    def __init__(self):
        _firmware.FLASH_BLOCK_swiginit(self, _firmware.new_FLASH_BLOCK())
    __swig_destroy__ = _firmware.delete_FLASH_BLOCK

# Register FLASH_BLOCK in _firmware:
_firmware.FLASH_BLOCK_swigregister(FLASH_BLOCK)

class FLASH_TABLE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Signature = property(_firmware.FLASH_TABLE_Signature_get, _firmware.FLASH_TABLE_Signature_set)
    Boot_Address = property(_firmware.FLASH_TABLE_Boot_Address_get, _firmware.FLASH_TABLE_Boot_Address_set)
    Version = property(_firmware.FLASH_TABLE_Version_get, _firmware.FLASH_TABLE_Version_set)
    Free_Area_Start = property(_firmware.FLASH_TABLE_Free_Area_Start_get, _firmware.FLASH_TABLE_Free_Area_Start_set)
    AppCode = property(_firmware.FLASH_TABLE_AppCode_get, _firmware.FLASH_TABLE_AppCode_set)
    ASIC_Config_Data = property(_firmware.FLASH_TABLE_ASIC_Config_Data_get, _firmware.FLASH_TABLE_ASIC_Config_Data_set)
    Sequence = property(_firmware.FLASH_TABLE_Sequence_get, _firmware.FLASH_TABLE_Sequence_set)
    APPL_Config_Data = property(_firmware.FLASH_TABLE_APPL_Config_Data_get, _firmware.FLASH_TABLE_APPL_Config_Data_set)
    OSD_Data = property(_firmware.FLASH_TABLE_OSD_Data_get, _firmware.FLASH_TABLE_OSD_Data_set)
    Splash_Data = property(_firmware.FLASH_TABLE_Splash_Data_get, _firmware.FLASH_TABLE_Splash_Data_set)
    APPL_OtherBinary = property(_firmware.FLASH_TABLE_APPL_OtherBinary_get, _firmware.FLASH_TABLE_APPL_OtherBinary_set)
    Splash_Data2 = property(_firmware.FLASH_TABLE_Splash_Data2_get, _firmware.FLASH_TABLE_Splash_Data2_set)
    Batch_File = property(_firmware.FLASH_TABLE_Batch_File_get, _firmware.FLASH_TABLE_Batch_File_set)

    def __init__(self):
        _firmware.FLASH_TABLE_swiginit(self, _firmware.new_FLASH_TABLE())
    __swig_destroy__ = _firmware.delete_FLASH_TABLE

# Register FLASH_TABLE in _firmware:
_firmware.FLASH_TABLE_swigregister(FLASH_TABLE)

class SPLASH_SUPER_BINARY_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Sig1 = property(_firmware.SPLASH_SUPER_BINARY_INFO_Sig1_get, _firmware.SPLASH_SUPER_BINARY_INFO_Sig1_set)
    Sig2 = property(_firmware.SPLASH_SUPER_BINARY_INFO_Sig2_get, _firmware.SPLASH_SUPER_BINARY_INFO_Sig2_set)
    BlobCount = property(_firmware.SPLASH_SUPER_BINARY_INFO_BlobCount_get, _firmware.SPLASH_SUPER_BINARY_INFO_BlobCount_set)

    def __init__(self):
        _firmware.SPLASH_SUPER_BINARY_INFO_swiginit(self, _firmware.new_SPLASH_SUPER_BINARY_INFO())
    __swig_destroy__ = _firmware.delete_SPLASH_SUPER_BINARY_INFO

# Register SPLASH_SUPER_BINARY_INFO in _firmware:
_firmware.SPLASH_SUPER_BINARY_INFO_swigregister(SPLASH_SUPER_BINARY_INFO)

class SPLASH_BLOB_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    BlobOffset = property(_firmware.SPLASH_BLOB_INFO_BlobOffset_get, _firmware.SPLASH_BLOB_INFO_BlobOffset_set)
    BlobSize = property(_firmware.SPLASH_BLOB_INFO_BlobSize_get, _firmware.SPLASH_BLOB_INFO_BlobSize_set)

    def __init__(self):
        _firmware.SPLASH_BLOB_INFO_swiginit(self, _firmware.new_SPLASH_BLOB_INFO())
    __swig_destroy__ = _firmware.delete_SPLASH_BLOB_INFO

# Register SPLASH_BLOB_INFO in _firmware:
_firmware.SPLASH_BLOB_INFO_swigregister(SPLASH_BLOB_INFO)

class SPLASH_HEADER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Signature = property(_firmware.SPLASH_HEADER_Signature_get, _firmware.SPLASH_HEADER_Signature_set)
    Image_width = property(_firmware.SPLASH_HEADER_Image_width_get, _firmware.SPLASH_HEADER_Image_width_set)
    Image_height = property(_firmware.SPLASH_HEADER_Image_height_get, _firmware.SPLASH_HEADER_Image_height_set)
    Byte_count = property(_firmware.SPLASH_HEADER_Byte_count_get, _firmware.SPLASH_HEADER_Byte_count_set)
    Subimg_offset = property(_firmware.SPLASH_HEADER_Subimg_offset_get, _firmware.SPLASH_HEADER_Subimg_offset_set)
    Subimg_end = property(_firmware.SPLASH_HEADER_Subimg_end_get, _firmware.SPLASH_HEADER_Subimg_end_set)
    Bg_color = property(_firmware.SPLASH_HEADER_Bg_color_get, _firmware.SPLASH_HEADER_Bg_color_set)
    Pixel_format = property(_firmware.SPLASH_HEADER_Pixel_format_get, _firmware.SPLASH_HEADER_Pixel_format_set)
    Compression = property(_firmware.SPLASH_HEADER_Compression_get, _firmware.SPLASH_HEADER_Compression_set)
    ByteOrder = property(_firmware.SPLASH_HEADER_ByteOrder_get, _firmware.SPLASH_HEADER_ByteOrder_set)
    ChromaOrder = property(_firmware.SPLASH_HEADER_ChromaOrder_get, _firmware.SPLASH_HEADER_ChromaOrder_set)
    Pad = property(_firmware.SPLASH_HEADER_Pad_get, _firmware.SPLASH_HEADER_Pad_set)

    def __init__(self):
        _firmware.SPLASH_HEADER_swiginit(self, _firmware.new_SPLASH_HEADER())
    __swig_destroy__ = _firmware.delete_SPLASH_HEADER

# Register SPLASH_HEADER in _firmware:
_firmware.SPLASH_HEADER_swigregister(SPLASH_HEADER)

class INIPARAM_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    token = property(_firmware.INIPARAM_INFO_token_get, _firmware.INIPARAM_INFO_token_set)
    default_param = property(_firmware.INIPARAM_INFO_default_param_get, _firmware.INIPARAM_INFO_default_param_set)
    gui_defined_param = property(_firmware.INIPARAM_INFO_gui_defined_param_get, _firmware.INIPARAM_INFO_gui_defined_param_set)
    nr_default_params = property(_firmware.INIPARAM_INFO_nr_default_params_get, _firmware.INIPARAM_INFO_nr_default_params_set)
    nr_user_defined_params = property(_firmware.INIPARAM_INFO_nr_user_defined_params_get, _firmware.INIPARAM_INFO_nr_user_defined_params_set)
    is_gui_editable = property(_firmware.INIPARAM_INFO_is_gui_editable_get, _firmware.INIPARAM_INFO_is_gui_editable_set)
    frmw_offset = property(_firmware.INIPARAM_INFO_frmw_offset_get, _firmware.INIPARAM_INFO_frmw_offset_set)
    frmw_size = property(_firmware.INIPARAM_INFO_frmw_size_get, _firmware.INIPARAM_INFO_frmw_size_set)

    def __init__(self):
        _firmware.INIPARAM_INFO_swiginit(self, _firmware.new_INIPARAM_INFO())
    __swig_destroy__ = _firmware.delete_INIPARAM_INFO

# Register INIPARAM_INFO in _firmware:
_firmware.INIPARAM_INFO_swigregister(INIPARAM_INFO)

APPCONFIG_VERSION_SUBMINOR = _firmware.APPCONFIG_VERSION_SUBMINOR
APPCONFIG_VERSION_MINOR = _firmware.APPCONFIG_VERSION_MINOR
APPCONFIG_VERSION_MAJOR = _firmware.APPCONFIG_VERSION_MAJOR
DEFAULT_FIRMWARE_TAG = _firmware.DEFAULT_FIRMWARE_TAG
DEFAULT_AUTOSTART = _firmware.DEFAULT_AUTOSTART
DEFAULT_DISPMODE = _firmware.DEFAULT_DISPMODE
DEFAULT_SHORT_FLIP = _firmware.DEFAULT_SHORT_FLIP
DEFAULT_LONG_FLIP = _firmware.DEFAULT_LONG_FLIP
DEFAULT_TRIG_OUT_1_POL = _firmware.DEFAULT_TRIG_OUT_1_POL
DEFAULT_TRIG_OUT_1_RDELAY = _firmware.DEFAULT_TRIG_OUT_1_RDELAY
DEFAULT_TRIG_OUT_1_FDELAY = _firmware.DEFAULT_TRIG_OUT_1_FDELAY
DEFAULT_TRIG_OUT_2_POL = _firmware.DEFAULT_TRIG_OUT_2_POL
DEFAULT_TRIG_OUT_2_WIDTH = _firmware.DEFAULT_TRIG_OUT_2_WIDTH
DEFAULT_TRIG_IN_1_DELAY = _firmware.DEFAULT_TRIG_IN_1_DELAY
DEFAULT_TRIG_IN_2_POL = _firmware.DEFAULT_TRIG_IN_2_POL
DEFAULT_RED_STROBE_RDELAY = _firmware.DEFAULT_RED_STROBE_RDELAY
DEFAULT_RED_STROBE_FDELAY = _firmware.DEFAULT_RED_STROBE_FDELAY
DEFAULT_GRN_STROBE_RDELAY = _firmware.DEFAULT_GRN_STROBE_RDELAY
DEFAULT_GRN_STROBE_FDELAY = _firmware.DEFAULT_GRN_STROBE_FDELAY
DEFAULT_BLU_STROBE_RDELAY = _firmware.DEFAULT_BLU_STROBE_RDELAY
DEFAULT_BLU_STROBE_FDELAY = _firmware.DEFAULT_BLU_STROBE_FDELAY
DEFAULT_INVERTDATA = _firmware.DEFAULT_INVERTDATA
DEFAULT_TESTPATTERN = _firmware.DEFAULT_TESTPATTERN
DEFAULT_LEDCURRENT_RED = _firmware.DEFAULT_LEDCURRENT_RED
DEFAULT_LEDCURRENT_GRN = _firmware.DEFAULT_LEDCURRENT_GRN
DEFAULT_LEDCURRENT_BLU = _firmware.DEFAULT_LEDCURRENT_BLU
DEFAULT_PATTERNCONFIG_PAT_EXPOSURE = _firmware.DEFAULT_PATTERNCONFIG_PAT_EXPOSURE
DEFAULT_PATTERNCONFIG_PAT_PERIOD = _firmware.DEFAULT_PATTERNCONFIG_PAT_PERIOD
DEFAULT_PATTERNCONFIG_PAT_MODE = _firmware.DEFAULT_PATTERNCONFIG_PAT_MODE
DEFAULT_PATTERNCONFIG_TRIG_MODE = _firmware.DEFAULT_PATTERNCONFIG_TRIG_MODE
DEFAULT_PATTERNCONFIG_PAT_REPEAT = _firmware.DEFAULT_PATTERNCONFIG_PAT_REPEAT
DEFAULT_PATTERNCONFIG_NUM_LUT_ENTRIES = _firmware.DEFAULT_PATTERNCONFIG_NUM_LUT_ENTRIES
DEFAULT_PATTERNCONFIG_NUM_PATTERNS = _firmware.DEFAULT_PATTERNCONFIG_NUM_PATTERNS
DEFAULT_PATTERNCONFIG_NUM_SPLASH = _firmware.DEFAULT_PATTERNCONFIG_NUM_SPLASH
DEFAULT_SPLASHLUT = _firmware.DEFAULT_SPLASHLUT
DEFAULT_SEQPATLUT = _firmware.DEFAULT_SEQPATLUT
DEFAULT_LED_ENABLE_MAN_MODE = _firmware.DEFAULT_LED_ENABLE_MAN_MODE
DEFAULT_MAN_ENABLE_RED_LED = _firmware.DEFAULT_MAN_ENABLE_RED_LED
DEFAULT_MAN_ENABLE_GRN_LED = _firmware.DEFAULT_MAN_ENABLE_GRN_LED
DEFAULT_MAN_ENABLE_BLU_LED = _firmware.DEFAULT_MAN_ENABLE_BLU_LED
DEFAULT_PORTCONFIG_PORT = _firmware.DEFAULT_PORTCONFIG_PORT
DEFAULT_PORTCONFIG_BPP = _firmware.DEFAULT_PORTCONFIG_BPP
DEFAULT_PORTCONFIG_PIX_FMT = _firmware.DEFAULT_PORTCONFIG_PIX_FMT
DEFAULT_PORTCONFIG_PORT_CLK = _firmware.DEFAULT_PORTCONFIG_PORT_CLK
DEFAULT_PORTCONFIG_ABC_MUX = _firmware.DEFAULT_PORTCONFIG_ABC_MUX
DEFAULT_PORTCONFIG_PIX_MODE = _firmware.DEFAULT_PORTCONFIG_PIX_MODE
DEFAULT_PORTCONFIG_SWAP_POL = _firmware.DEFAULT_PORTCONFIG_SWAP_POL
DEFAULT_PORTCONFIG_FLD_SEL = _firmware.DEFAULT_PORTCONFIG_FLD_SEL
PERIPHERALS_I2CADDRESS_0 = _firmware.PERIPHERALS_I2CADDRESS_0
PERIPHERALS_I2CADDRESS_1 = _firmware.PERIPHERALS_I2CADDRESS_1
DATAPATH_SPLASHSTARTUPTIMEOUT = _firmware.DATAPATH_SPLASHSTARTUPTIMEOUT
DATAPATH_SPLASHATSTARTUPENABLE = _firmware.DATAPATH_SPLASHATSTARTUPENABLE
MACHINE_DATA_COLORPROFILE_0_BRILLIANTCOLORLOOK = _firmware.MACHINE_DATA_COLORPROFILE_0_BRILLIANTCOLORLOOK
INITOKENS_MAX = _firmware.INITOKENS_MAX
NR_INI_GUI_TOKENS = _firmware.NR_INI_GUI_TOKENS

def DLPC350_Frmw_CopyAndVerifyImage(pByteArray, size):
    return _firmware.DLPC350_Frmw_CopyAndVerifyImage(pByteArray, size)

def DLPC350_Frmw_GetSplashCount():
    return _firmware.DLPC350_Frmw_GetSplashCount()

def DLPC350_Frmw_GetVersionNumber():
    return _firmware.DLPC350_Frmw_GetVersionNumber()

def DLPC350_Frmw_GetSPlashFlashStartAddress():
    return _firmware.DLPC350_Frmw_GetSPlashFlashStartAddress()

def DLPC350_Frmw_GetSpashImage(pImageBuffer, index):
    return _firmware.DLPC350_Frmw_GetSpashImage(pImageBuffer, index)

def DLPC350_Frmw_SPLASH_InitBuffer(numSplash):
    return _firmware.DLPC350_Frmw_SPLASH_InitBuffer(numSplash)

def DLPC350_Frmw_SPLASH_AddSplash(pImageBuffer, compression, compSize):
    return _firmware.DLPC350_Frmw_SPLASH_AddSplash(pImageBuffer, compression, compSize)

def DLPC350_Frmw_Get_NewFlashImage(newFrmwbuffer, newFrmwsize):
    return _firmware.DLPC350_Frmw_Get_NewFlashImage(newFrmwbuffer, newFrmwsize)

def DLPC350_Frmw_Get_NewSplashBuffer(newSplashBuffer, newSplashSize):
    return _firmware.DLPC350_Frmw_Get_NewSplashBuffer(newSplashBuffer, newSplashSize)

def DLPC350_Frmw_UpdateFlashTableSplashAddress(flashTableSectorBuffer, address_offset):
    return _firmware.DLPC350_Frmw_UpdateFlashTableSplashAddress(flashTableSectorBuffer, address_offset)

def DLPC350_Frmw_ParseIniLines(iniLine):
    return _firmware.DLPC350_Frmw_ParseIniLines(iniLine)

def DLPC350_Frmw_GetCurrentIniLineParam(token, params, numParams):
    return _firmware.DLPC350_Frmw_GetCurrentIniLineParam(token, params, numParams)

def DLPC350_Frmw_WriteApplConfigData(token, params, numParams):
    return _firmware.DLPC350_Frmw_WriteApplConfigData(token, params, numParams)


